// This is your Prisma schema file
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  USER
  ADMIN
}

enum ThemePreference {
  LIGHT
  DARK
  SYSTEM
}

enum Language {
  PT
  EN
  ES
}

model User {
  id            String    @id @default(uuid())
  name          String    @db.VarChar(100)
  email         String    @unique @db.VarChar(255)
  passwordHash  String
  role          UserRole  @default(USER)
  bggUsername   String?   @db.VarChar(50)
  lastBggSync   DateTime?
  isActive      Boolean   @default(true)
  emailVerified Boolean   @default(false)
  
  // Preferências do usuário
  theme         ThemePreference @default(SYSTEM)
  language      Language        @default(PT)
  notifications Boolean         @default(true)
  
  // Configurações de privacidade
  publicProfile Boolean   @default(true)
  showCollection Boolean  @default(true)
  showRankings  Boolean   @default(true)
  
  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLoginAt   DateTime?
  
  // Relações
  userGames     UserGame[]
  comparisons   Comparison[]
  adjustedScores AdjustedScore[]
  adjustedRankings AdjustedRanking[]
  refreshTokens RefreshToken[]

  @@index([email])
  @@index([bggUsername])
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  expiresAt DateTime
  revoked   Boolean  @default(false)
  createdAt DateTime @default(now())
  
  @@index([userId])
  @@index([token])
}

model Game {
  id            String    @id @default(uuid())
  name          String    @db.VarChar(255)
  bggId         Int?      @unique
  imageUrl      String?   @db.Text
  yearPublished Int?
  minPlayers    Int?
  maxPlayers    Int?
  playtime      Int?      // Em minutos
  complexity    Decimal?  @db.Decimal(3, 2)
  description   String?   @db.Text
  
  // Estatísticas BGG
  bggRating     Decimal?  @db.Decimal(4, 2)
  bggWeight     Decimal?  @db.Decimal(4, 2)
  numOwners     Int?
  numRatings    Int?
  
  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastBggSync   DateTime?
  
  // Relações
  userGames     UserGame[]
  categories    GameCategoryAssignment[]
  mechanics     GameMechanicAssignment[]
  authors       GameAuthorAssignment[]
  comparisonsA  Comparison[]  @relation("GameA")
  comparisonsB  Comparison[]  @relation("GameB")
  chosenComparisons Comparison[] @relation("ChosenGame")
  adjustedScores AdjustedScore[]
  adjustedRankings AdjustedRanking[]

  @@index([bggId])
  @@index([name])
  @@index([yearPublished])
}

model GameCategory {
  id        String    @id @default(uuid())
  name      String    @unique @db.VarChar(100)
  bggId     Int?      @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  games     GameCategoryAssignment[]

  @@index([name])
  @@index([bggId])
}

model GameCategoryAssignment {
  id          String       @id @default(uuid())
  game        Game        @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId      String
  category    GameCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  String
  createdAt   DateTime    @default(now())

  @@unique([gameId, categoryId])
  @@index([gameId])
  @@index([categoryId])
}

model GameMechanic {
  id        String    @id @default(uuid())
  name      String    @unique @db.VarChar(100)
  bggId     Int?      @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  games     GameMechanicAssignment[]

  @@index([name])
  @@index([bggId])
}

model GameMechanicAssignment {
  id          String       @id @default(uuid())
  game        Game        @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId      String
  mechanic    GameMechanic @relation(fields: [mechanicId], references: [id], onDelete: Cascade)
  mechanicId  String
  createdAt   DateTime    @default(now())

  @@unique([gameId, mechanicId])
  @@index([gameId])
  @@index([mechanicId])
}

model GameAuthor {
  id        String    @id @default(uuid())
  name      String    @unique @db.VarChar(100)
  bggId     Int?      @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  games     GameAuthorAssignment[]

  @@index([name])
  @@index([bggId])
}

model GameAuthorAssignment {
  id        String     @id @default(uuid())
  game      Game      @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId    String
  author    GameAuthor @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  role      String?   @db.VarChar(50)
  createdAt DateTime  @default(now())

  @@unique([gameId, authorId, role])
  @@index([gameId])
  @@index([authorId])
}

model UserGame {
  id              String    @id @default(uuid())
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  game            Game      @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId          String
  initialScore    Decimal   @default(5.5) @db.Decimal(10, 3)
  
  // Campos da coleção BGG
  bggCollectionId String?   @db.VarChar(50)
  own            Boolean    @default(false)
  prevOwned      Boolean    @default(false)
  forTrade       Boolean    @default(false)
  want           Boolean    @default(false)
  wantToPlay     Boolean    @default(false)
  wantToBuy      Boolean    @default(false)
  wishlist       Boolean    @default(false)
  wishlistPriority Int      @default(0)
  preordered     Boolean    @default(false)
  
  // Ratings e comentários
  userRating     Decimal?   @db.Decimal(4, 2)
  userComment    String?    @db.Text
  
  // Estatísticas de jogo
  numPlays       Int        @default(0)
  lastPlayed     DateTime?
  
  // Informações privadas
  pricePaid      Decimal?   @db.Decimal(10, 2)
  currency       String?    @db.VarChar(3)
  currentValue   Decimal?   @db.Decimal(10, 2)
  acquisitionDate DateTime?
  acquiredFrom   String?    @db.VarChar(100)
  condition      String?    @db.VarChar(50)
  
  // Controle de sincronização
  lastSync       DateTime?
  syncErrors     String?    @db.Text
  
  // Timestamps
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@unique([userId, gameId])
  @@index([userId])
  @@index([gameId])
  @@index([bggCollectionId])
  @@index([lastSync])
}

model Dimension {
  id            String    @id @default(uuid())
  name          String    @unique @db.VarChar(100)
  description   String?   @db.Text
  defaultWeight Decimal   @db.Decimal(5, 2)
  isMandatory   Boolean   @default(false)
  isActive      Boolean   @default(true)
  order         Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  comparisons   Comparison[]
  adjustedScores AdjustedScore[]

  @@index([name])
  @@index([isActive])
  @@index([order])
}

model AdjustedScore {
  id          String    @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  game        Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId      String
  dimension   Dimension @relation(fields: [dimensionId], references: [id], onDelete: Cascade)
  dimensionId String
  score       Decimal  @db.Decimal(10, 3)
  frequency   Int      @default(0)
  confidence  Decimal  @db.Decimal(5, 2) @default(1.0)
  timestamp   DateTime @default(now())

  @@unique([userId, gameId, dimensionId])
  @@index([userId])
  @@index([gameId])
  @@index([dimensionId])
  @@index([timestamp])
}

model AdjustedRanking {
  id              String    @id @default(uuid())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  game            Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId          String
  normalizedScore Decimal  @db.Decimal(10, 3)
  rankPosition    Int
  previousPosition Int?
  timestamp       DateTime @default(now())

  @@unique([userId, gameId])
  @@index([userId])
  @@index([gameId])
  @@index([rankPosition])
  @@index([timestamp])
}

model Comparison {
  id            String    @id @default(uuid())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  gameA         Game     @relation("GameA", fields: [gameAId], references: [id], onDelete: Cascade)
  gameAId       String
  gameB         Game     @relation("GameB", fields: [gameBId], references: [id], onDelete: Cascade)
  gameBId       String
  chosenGame    Game     @relation("ChosenGame", fields: [chosenGameId], references: [id], onDelete: Cascade)
  chosenGameId  String
  dimension     Dimension @relation(fields: [dimensionId], references: [id], onDelete: Cascade)
  dimensionId   String
  confidence    Decimal  @db.Decimal(5, 2) @default(1.0)
  timeToDecide  Int?     // Tempo em segundos para tomar a decisão
  comparisonDate DateTime @default(now())
  createdAt     DateTime @default(now())

  @@index([userId])
  @@index([gameAId])
  @@index([gameBId])
  @@index([chosenGameId])
  @@index([dimensionId])
  @@index([comparisonDate])
}